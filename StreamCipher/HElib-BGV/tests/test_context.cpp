#include <iostream>
#include <cstring>
#include <stdint.h>
#include <chrono>
#include <vector>
#include <omp.h>
#include <array>
#include <cstdint>
#include <cstring>
#include <atomic>
#include <cmath>
#include <chrono>
#include <fstream>
#include <memory>
#include <random>
#include <climits>
#include <thread>

#include <NTL/ZZX.h>
#include <NTL/GF2X.h>
#include <helib/helib.h>
#include <helib/ArgMap.h>
#include <helib/DoubleCRT.h>

using namespace std;
using namespace helib;
using namespace NTL;

int main()
{
    // long mValues[][5] = {
    // {p, log2(m), bits, c, r}}
    // {786433,17,450,2,1},
    // {4091, 11, 700, 2, 1},
    // {65537, 11, 700, 3, 1},
    // {65537, 11, 700, 4, 1},
    // {65537, 11, 700, 5, 1},
    // {65537, 11, 700, 6, 1},
    // {65537, 11, 700, 7, 1},
    // {65537, 11, 700, 8, 1},
    // {65537, 11, 700, 9, 1},
    // {65537, 11, 700, 10, 1},
    // {65537, 11, 700, 11, 1},
    // {65537, 11, 700, 12, 1},

    // {65537, 11, 800, 2, 1},
    // {65537, 11, 800, 3, 1},
    // {65537, 11, 800, 4, 1},
    // {65537, 11, 800, 5, 1},
    // {65537, 11, 800, 6, 1},
    // {65537, 11, 800, 7, 1},
    // {65537, 11, 800, 8, 1},
    // {65537, 11, 800, 9, 1},
    // {65537, 11, 800, 10, 1},
    // {65537, 11, 800, 11, 1},
    // {65537, 11, 800, 12, 1},

    // {65537, 11, 100, 2, 1},
    // {65537, 11, 100, 3, 1},
    // {65537, 11, 100, 4, 1},
    // {65537, 11, 100, 5, 1},
    // {65537, 11, 100, 6, 1},
    // {65537, 11, 100, 7, 1},
    // {65537, 11, 100, 8, 1},
    // {65537, 11, 100, 9, 1},
    // {65537, 11, 100, 10, 1},
    // {65537, 11, 100, 11, 1},
    // {65537, 11, 100, 12, 1},

    // {65537, 11, 200, 2, 1},
    // {65537, 11, 200, 3, 1},
    // {65537, 11, 200, 4, 1},
    // {65537, 11, 200, 5, 1},
    // {65537, 11, 200, 6, 1},
    // {65537, 11, 200, 7, 1},
    // {65537, 11, 200, 8, 1},
    // {65537, 11, 200, 9, 1},
    // {65537, 11, 200, 10, 1},
    // {65537, 11, 200, 11, 1},
    // {65537, 11, 200, 12, 1},

    // {65537, 11, 500, 10, 1},
    // {65537, 11, 500, 11, 1},
    // {65537, 11, 500, 12, 1},
    // {65537, 11, 400, 10, 1},
    // {65537, 11, 400, 11, 1},
    // {65537, 11, 400, 12, 1},
    // {65537, 11, 300, 10, 1},
    // {65537, 11, 300, 11, 1},
    // {65537, 11, 300, 12, 1},
    // {65537, 11, 500, 7, 1},
    // {65537, 11, 500, 8, 1},
    // {65537, 11, 500, 9, 1},
    // {65537, 11, 400, 7, 1},
    // {65537, 11, 400, 8, 1},
    // {65537, 11, 400, 9, 1},
    // {65537, 11, 300, 7, 1},
    // {65537, 11, 300, 8, 1},
    // {65537, 11, 300, 9, 1},
    // {65537, 11, 300, 6, 1},
    // {65537, 11, 400, 6, 1},
    // {65537, 11, 500, 6, 1},
    // {65537, 12, 300, 6, 1},
    // {65537, 12, 400, 6, 1},
    // {65537, 12, 500, 6, 1},
    // {65537, 13, 300, 6, 1},
    // {65537, 13, 400, 6, 1},
    // {65537, 13, 500, 6, 1},
    // {17367041, 11, 300, 6, 1},
    // {17367041, 11, 400, 6, 1},
    // {17367041, 11, 500, 6, 1},
    // {17367041, 12, 300, 6, 1},
    // {17367041, 12, 400, 6, 1},
    // {17367041, 12, 500, 6, 1},
    // {17367041, 13, 300, 6, 1},
    // {17367041, 13, 400, 6, 1},
    // {17367041, 13, 500, 6, 1},
    // {65537, 11, 300, 5, 1},
    // {65537, 11, 400, 5, 1},
    // {65537, 11, 500, 5, 1},
    // {65537, 12, 300, 5, 1},
    // {65537, 12, 400, 5, 1},
    // {65537, 12, 500, 5, 1},
    // {65537, 13, 300, 5, 1},
    // {65537, 13, 400, 5, 1},
    // {65537, 13, 500, 5, 1},
    // {17367041, 11, 300, 5, 1},
    // {17367041, 11, 400, 5, 1},
    // {17367041, 11, 500, 5, 1},
    // {17367041, 12, 300, 5, 1},
    // {17367041, 12, 400, 5, 1},
    // {17367041, 12, 500, 5, 1},
    // {17367041, 13, 300, 5, 1},
    // {17367041, 13, 400, 5, 1},
    // {17367041, 13, 500, 5, 1},
    // {65537, 11, 300, 4, 1},    // 1，安全性183.748
    // {65537, 11, 400, 4, 1},    // 0, 安全性81.874
    // {65537, 11, 500, 4, 1},    // 1，安全性183.748
    // {65537, 12, 300, 4, 1},    // 0, 安全性81.874
    // {65537, 12, 400, 4, 1},    // 1，安全性183.748
    // {65537, 12, 500, 4, 1},    // 1，安全性183.748
    // {65537, 13, 300, 4, 1},    // 0, 安全性81.874
    // {65537, 13, 400, 4, 1},    // 1，安全性183.748
    // {65537, 13, 500, 4, 1},    // 1，安全性183.748
    // {17367041, 11, 300, 4, 1}, // 4, 安全性145.949
    // {17367041, 11, 400, 4, 1}, // 4, 安全性145.949
    // {17367041, 11, 500, 4, 1}, // 4, 安全性145.949
    // {17367041, 12, 300, 4, 1}, // 4, 安全性145.949
    // {17367041, 12, 400, 4, 1}, // 4, 安全性145.949
    // {17367041, 12, 500, 4, 1}, // 4, 安全性145.949
    // {17367041, 13, 300, 4, 1}, // 4, 安全性145.949
    // {17367041, 13, 400, 4, 1}, // 4, 安全性145.949
    // {17367041, 13, 500, 4, 1}, // 2, 安全性145.949
    // {65537, 11, 300, 3, 1},    // 1，安全性183.748
    // {65537, 11, 400, 3, 1},    // 0, 安全性81.874
    // {65537, 11, 500, 3, 1},    // 1，安全性183.748
    // {65537, 12, 300, 3, 1},    // 0, 安全性81.874
    // {65537, 12, 400, 3, 1},    // 1，安全性183.748
    // {65537, 12, 500, 3, 1},    // 1，安全性183.748
    // {65537, 13, 300, 3, 1},    // 0, 安全性81.874
    // {65537, 13, 400, 3, 1},    // 1，安全性183.748
    // {65537, 13, 500, 3, 1},    // 1，安全性183.748
    // {17367041, 11, 300, 3, 1}, // 3, 安全性145.949
    // {17367041, 11, 400, 3, 1}, // 3, 安全性145.949
    // {17367041, 11, 500, 3, 1}, // 3, 安全性145.949
    // {17367041, 12, 300, 3, 1}, // 3, 安全性145.949
    // {17367041, 12, 400, 3, 1}, // 3, 安全性145.949
    // {17367041, 12, 500, 3, 1}, // 2, 安全性145.949
    // {17367041, 13, 300, 3, 1}, // 2, 安全性145.949
    // {17367041, 13, 400, 3, 1}, // 2, 安全性145.949
    // {17367041, 13, 500, 3, 1}, // 2, 安全性145.949
    // {65537, 11, 300, 2, 1},    // 1，安全性183.748
    // {65537, 11, 400, 2, 1},    // 0, 安全性81.874
    // {65537, 11, 500, 2, 1},    // 1，安全性183.748
    // {65537, 12, 300, 2, 1},    // 0, 安全性81.874
    // {65537, 12, 400, 2, 1},    // 1，安全性183.748
    // {65537, 12, 500, 2, 1},    // 1，安全性183.748
    // {65537, 13, 300, 2, 1},    // 0, 安全性81.874
    // {65537, 13, 400, 2, 1},    // 1，安全性183.748
    // {65537, 13, 500, 2, 1},    // 1，安全性183.748
    // {17367041, 11, 300, 2, 1}, // 2, 安全性145.949
    // {17367041, 11, 400, 2, 1}, // 2, 安全性145.949
    // {17367041, 11, 500, 2, 1}, // 2, 安全性145.949
    // {17367041, 12, 300, 2, 1}, // 2, 安全性145.949
    // {17367041, 12, 400, 2, 1}, // 2, 安全性145.949
    // {17367041, 12, 500, 2, 1}, // 2, 安全性145.949
    // {17367041, 13, 300, 2, 1}, // 2, 安全性145.949
    // {17367041, 13, 400, 2, 1}, // 2, 安全性145.949
    // {17367041, 13, 500, 2, 1}, // 2, 安全性145.949
    // {65537, 14, 200, 2, 1},    // 1，安全性183.748
    // {65537, 14, 300, 2, 1},    // 0, 安全性81.874
    // {65537, 14, 400, 2, 1},    // 1，安全性183.748
    // {65537, 15, 300, 2, 1},    // 0, 安全性81.874
    // {65537, 15, 400, 2, 1},    // 1，安全性183.748
    // {65537, 15, 500, 2, 1},    // 1，安全性183.748
    // {65537, 16, 300, 2, 1},    // 0, 安全性81.874
    // {65537, 16, 400, 2, 1},    // 1，安全性183.748
    // {65537, 16, 500, 2, 1},    // 1，安全性183.748
    // {17367041, 14, 200, 2, 1}, // 2, 安全性145.949
    // {17367041, 14, 300, 2, 1}, // 2, 安全性145.949
    // {17367041, 14, 400, 2, 1}, // 2, 安全性145.949
    // {17367041, 15, 300, 2, 1}, // 2, 安全性145.949
    // {17367041, 15, 400, 2, 1}, // 2, 安全性145.949
    // {17367041, 15, 500, 2, 1}, // 2, 安全性145.949
    // {17367041, 16, 300, 2, 1}, // 2, 安全性145.949
    // {17367041, 16, 400, 2, 1}, // 2, 安全性145.949
    // {17367041, 16, 500, 2, 1}, // 2, 安全性145.949
    // {32440321, 14, 200, 2, 1}, // 3, 安全性145.949
    // {32440321, 14, 300, 2, 1}, // 3, 安全性145.949
    // {32440321, 14, 400, 2, 1}, // 3, 安全性145.949
    // {32440321, 15, 300, 2, 1}, // 3, 安全性145.949
    // {32440321, 15, 400, 2, 1}, // 3, 安全性145.949
    // {32440321, 15, 500, 2, 1}, // 3, 安全性145.949
    // {32440321, 16, 300, 2, 1}, // 3, 安全性145.949
    // {32440321, 16, 400, 2, 1}, // 3, 安全性145.949
    // {32440321, 16, 500, 2, 1}, // 3, 安全性145.949
    // };

    // 指定文件路径
    std::string filePath = "../tests/test_context.txt";

    // 打开文件
    std::ofstream outfile(filePath, std::ios::app);
    if (!outfile)
    {
        std::cerr << "Error opening file: " << filePath << std::endl;
        return 1;
    }

    long m;
    long p = 65537;
    long r = 1;
    long securitylevel;
    for (long bits = 200; bits <= 300; bits += 1)
    {
        m = pow(2, 14);
        for (long c = 2; c <= 5; c++)
        {
            std::shared_ptr<Context> context(ContextBuilder<BGV>()
                                                 .m(m)
                                                 .p(p)
                                                 .r(r)
                                                 .bits(bits)
                                                 .c(c)
                                                 .buildPtr());
            long nslots = context->getEA().size();
            long Qbits = context->bitSizeOfQ();
            securitylevel = context->securityLevel();

            outfile << std::left << std::setw(20) << p
                    << std::left << std::setw(20) << nslots
                    << std::left << std::setw(20) << bits
                    << std::left << std::setw(20) << c
                    << std::left << std::setw(20) << r
                    << std::left << std::setw(20) << Qbits
                    << std::left << std::setw(20) << securitylevel
                    << std::endl;
        }
        if (securitylevel < 128)
        {
            std::cerr << "Security level  128 is not enough!!!" << std::endl;
            break;
        }
    }
    for (long bits = 200; bits <= 300; bits += 10)
    {
        m = pow(2, 14);
        for (long c = 2; c <= 5; c++)
        {
            std::shared_ptr<Context> context(ContextBuilder<BGV>()
                                                 .m(m)
                                                 .p(p)
                                                 .r(r)
                                                 .bits(bits)
                                                 .c(c)
                                                 .buildPtr());
            long nslots = context->getEA().size();
            long Qbits = context->bitSizeOfQ();
            securitylevel = context->securityLevel();

            outfile << std::left << std::setw(20) << p
                    << std::left << std::setw(20) << nslots
                    << std::left << std::setw(20) << bits
                    << std::left << std::setw(20) << c
                    << std::left << std::setw(20) << r
                    << std::left << std::setw(20) << Qbits
                    << std::left << std::setw(20) << securitylevel
                    << std::endl;
        }
        if (securitylevel < 80)
        {
            std::cerr << "Security level  80 is not enough!!!" << std::endl;
            break;
        }
    }
    for (long bits = 200; bits <= 300; bits += 10)
    {
        m = pow(2, 15);
        for (long c = 2; c <= 5; c++)
        {
            std::shared_ptr<Context> context(ContextBuilder<BGV>()
                                                 .m(m)
                                                 .p(p)
                                                 .r(r)
                                                 .bits(bits)
                                                 .c(c)
                                                 .buildPtr());
            long nslots = context->getEA().size();
            long Qbits = context->bitSizeOfQ();
            securitylevel = context->securityLevel();

            outfile << std::left << std::setw(20) << p
                    << std::left << std::setw(20) << nslots
                    << std::left << std::setw(20) << bits
                    << std::left << std::setw(20) << c
                    << std::left << std::setw(20) << r
                    << std::left << std::setw(20) << Qbits
                    << std::left << std::setw(20) << securitylevel
                    << std::endl;
        }
        if (securitylevel < 128)
        {
            std::cerr << "Security level  128 is not enough!!!" << std::endl;
            break;
        }
    }
    for (long bits = 200; bits <= 400; bits += 10)
    {
        m = pow(2, 15);
        for (long c = 2; c <= 5; c++)
        {
            std::shared_ptr<Context> context(ContextBuilder<BGV>()
                                                 .m(m)
                                                 .p(p)
                                                 .r(r)
                                                 .bits(bits)
                                                 .c(c)
                                                 .buildPtr());
            long nslots = context->getEA().size();
            long Qbits = context->bitSizeOfQ();
            securitylevel = context->securityLevel();

            outfile << std::left << std::setw(20) << p
                    << std::left << std::setw(20) << nslots
                    << std::left << std::setw(20) << bits
                    << std::left << std::setw(20) << c
                    << std::left << std::setw(20) << r
                    << std::left << std::setw(20) << Qbits
                    << std::left << std::setw(20) << securitylevel
                    << std::endl;
        }
        if (securitylevel < 80)
        {
            std::cerr << "Security level 80 is not enough!!!" << std::endl;
            break;
        }
    }
    for (long bits = 250; bits <= 550; bits += 10)
    {
        m = pow(2, 16);
        for (long c = 2; c <= 5; c++)
        {
            std::shared_ptr<Context> context(ContextBuilder<BGV>()
                                                 .m(m)
                                                 .p(p)
                                                 .r(r)
                                                 .bits(bits)
                                                 .c(c)
                                                 .buildPtr());
            long nslots = context->getEA().size();
            long Qbits = context->bitSizeOfQ();
            securitylevel = context->securityLevel();

            outfile << std::left << std::setw(20) << p
                    << std::left << std::setw(20) << nslots
                    << std::left << std::setw(20) << bits
                    << std::left << std::setw(20) << c
                    << std::left << std::setw(20) << r
                    << std::left << std::setw(20) << Qbits
                    << std::left << std::setw(20) << securitylevel
                    << std::endl;
        }
        if (securitylevel < 128)
        {
            std::cerr << "Security level 128 is not enough!!!" << std::endl;
            break;
        }
    }
    // 关闭文件
    outfile.close();
    std::cout << "test_context.txt updated." << std::endl;

    return 0;
}